;this config.ini is read by the MALL when it opens.
;it must be in your top-level test directory
;its parent directory must be named "tests"
;the first section should also be called "tests"
[tests]
assert_no_missing_calls = false
assert_no_extra_calls = false
assert_reproduction_as_success = true
;name sut_callable is reserved and must be added to imports; string is the import path of the
;Callable that returns an instance of the system-under-test
sut_callable = tests.test_http.passthru_app.PassthruTestHandler
requests = pytest_factory.monkeypatch.requests
tornado = pytest_factory.monkeypatch.tornado
;name env_vars is reserved: the value is a json string that will be parsed as a dict; at start of pytest
;collection, but BEFORE the imports, the dict will be used to monkeypatch the environment variables
env_vars = {"TEST": "42"}
http_req_wildcard_fields = query
;if a configuration name is not added to any of the reserved configurations below, it is assumed to be a string
string_var = FOO
;name imports is reserved: the value is a comma-separated list of configuration names whose values
;are import paths that will be imported and getattr'd as needed at the end of pytest configuration
;and are retained by the MALL as properties to provide default configurations for each Store
imports = sut_callable, requests, tornado
;name tuples is reserved: values are of type tuple
tuples = http_req_wildcard_fields
;name dicts is reserved: values are of type dict
dicts = env_vars
;name bools is reserved: values are of type bool
bools = assert_no_missing_calls, assert_no_extra_calls, assert_reproduction_as_success


;subsequent sections must match names of sibling directories
;configurations defined in those sections
;override configurations defined in "tests"
;when requested for tests in those sibling directories
[test_configs]
http_req_wildcard_fields = otherfield
string_var = BAR
tuples = http_req_wildcard_fields
env_vars = {"TEST": "404"}
dicts = env_vars

[test_plugin]
;the value is for an example of a plugin. when the MALL opens and executes the imports defined in this file,
;it checks to see if any are a pytest_factory.framework.base_types.BasePlugin sub-class. if so, the Store
;for those tests in the applicable test module will be pre-stocked with the plugin
plugin0 = tests.test_plugin.mock_plugin.plugin.MockPlugin
imports = plugin0


[test_mock_request]
sut_callable = tests.test_mock_request.other_app.MockRequestTestHandler
imports = sut_callable

[test_smtp]
sut_callable = tests.test_smtp.smtp_app.SmtpTestHandler
smtplib = pytest_factory.monkeypatch.smtplib
imports = sut_callable, smtplib

[test_monkeypatch]
sut_callable = tests.test_monkeypatch.passthru_app.PassthruTestHandler
aiohttp = pytest_factory.monkeypatch.aiohttp
imports = sut_callable, aiohttp