import pytest

{% for factory_path, factory_name in recording.get_factory_paths(): %}
from {{factory_path}} import {{factory_name}}
{% endfor %}
from pytest_factory import {{recording.first.factory_path}}


pytestmark = pytest.mark.asyncio

sut_inputs = {{recording.first.inputs}}

{% if not recording.raises %}
with open('actual_response') as file:
    actual_response = file.read()
{% endif %}

class TestHttp:
    @{{recording.first.factory}}(**sut_inputs)
    {% for request, response in recording.doc_exchanges: %}
    @{{request.factory_name}}(**{{request.inputs}}, response='{{response}}')
    {% endfor %}
    async def test_{{generated_test_id}}(self, store):
        {% if recording.raises %}
        with pytest.raises(recording.last):
            await store.handler.run_test()
        {% else: %}
        simulated_response = await store.handler.run_test()
        assert simulated_response == actual_response
        {% endif %}
