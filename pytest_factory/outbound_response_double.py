from typing import Hashable, Any


class BaseMockRequest(Hashable):
    """
    dual-purpose class used to represent:
    - Actual Requests when created from parameters of @actual_request
    - Expected Requests when created from parameters of @mock_server
    (or similar factory)

    these are stored in store fixture, indexed by: test name, factory name(s), then BaseMockRequest
    object
    """

    def compare(self, other) -> bool:
        """
        we are effectively simulating the third-party endpoint's router here. note that "this" is the request object of
        the test double that MAY match actual. the "other" request object is the actual request generated by the
        component under test
        e.g. "https://www.test.com?id=0&loc=1" should match
        "https://www.test.com?loc=1&id=0"
        """
        raise NotImplementedError

    def __hash__(self) -> int:
        return id(self)


class BaseFactoryPlugin:
    def map_test_double(self, req_obj: BaseMockRequest) -> Any:
        """
        implement this method to create a factory plugin. a factory plugin is a module that routes a request
        outbound from your component under test to the correct test double. gets invoked from Store.get_next_response

        :param req_obj: the request coming from your component under test
        :return:
        """
        raise NotImplementedError
