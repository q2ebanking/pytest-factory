import pytest
{% if recording.raises: %}
from {{recording.last.IMPORT_PATH}} import {{recording.last.__name__}}
{% endif %}
{% for factory_path, factory_name in recording.get_factories(): %}
from {{factory_path}} import {{factory_name}}
{% endfor %}
from {{request_factory_path}} import {{request_factory_name}}

from {{handler_path}} import {{handler_name}}


pytestmark = pytest.mark.asyncio

sut_inputs = {{recording.first.kwargs}}

{% if not recording.raises %}
with open('actual_response') as file:
    actual_response = file.read()
{% endif %}

class Test{{handler_name}}{{incident_name}}:
    """
    Test{{handler_name}}{{incident_name}} was generated by PytestFactory

    """
    {% for request, response in recording.doc_exchanges: %}
    @{{request.factory_name}}(**{{request.kwargs}}, response='{{response}}')
    {% endfor %}
    @{{recording.first.FACTORY_NAME}}(**sut_inputs, handler_class={{handler_name}})
    async def test_{{generated_test_id}}(self, store):
        {% if recording.raises %}
        with pytest.raises({{recording.last.__name__}}):
            await store.handler.run_test()
        {% else: %}
        simulated_response = await store.handler.run_test()
        assert simulated_response == actual_response
        {% endif %}
