import pytest
{%- if recording.raises: %}

from {{recording.last.__module__}} import {{recording.last.__name__}}
{%- else %}
from pathlib import Path

from pytest_factory.lifecycle.recording import reify
{%- endif %}
{%- for request, response in recording.doc_exchanges: %}
from {{request.FACTORY_PATH}} import {{request.FACTORY_NAME}}
from {{response.__module__}} import {{response.__class__.__name__}}
{%- endfor %}
from {{request_factory_path}} import {{request_factory_name}}

from {{handler_path}} import {{handler_name}}

pytestmark = pytest.mark.asyncio

{%- if not recording.raises %}
p = Path(__file__).parent.joinpath('actual_response')
with open(p) as file:
    actual_response_str = file.read()
{%- endif %}

class Test{{handler_name}}{{incident_name}}:
    """
    Generated by PytestFactory
    """
    {%- for request, response in recording.doc_exchanges: %}
    @{{request.FACTORY_NAME}}({{request.write(just_args=True)}}, response={{response.write()}})
    {%- endfor %}
    @{{recording.first.FACTORY_NAME}}({{recording.first.write(just_args=True)}})
    async def test_{{generated_test_id}}(self, store):
        {% if recording.raises %}
        with pytest.raises({{recording.last.__name__}}):
            await store.sut.run_test()
        {%- else: %}
        actual_response = reify(actual_response_str)
        simulated_response = await store.sut.run_test()
        {% for attribute in response_attributes: %}
        assert simulated_response.{{attribute}} == actual_response.{{attribute}}
        {%- endfor %}
        {%- endif %}
